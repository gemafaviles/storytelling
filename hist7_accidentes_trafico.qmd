---
title: "¿Cómo y dónde se producen los accidentes en Madrid?"
author:
  - Gema Fernández-Avilés (Gema.FAviles@uclm.es)
  - Isidro Hidalgo (Isidro.Hidalgo@uclm.es)
format:
  html:
    theme: cerulean
    highlight-style: ayu-mirage
    self-contained: true
    lang: es
    date: 01/20/2025
    date-format: long
    embed-resources: true
    toc-title: Summary
    toc: true
    number-sections: true
    preview-links: auto
    code-link: true
    code-fold: true
number-sections: true
execute:
  echo: true
  eval: true
  output: true
  include: true
  freeze: auto
  fig-height: 5
  warning: false
  comment: "#>"
  code-line-numbers: true
  code-copy: true
  code-overflow: scroll
  code-fold: true
---

::: {.callout-note}
Los datos que se utilizan en esta historia están disponibles en el paquete `CDR` que puede instalarse con el siguiente comando (se comprueba si no lo está):

``` {r}
#| code-summary: Instalación y/o carga del paquete `CDR`

if (!require(CDR)){
  if (!require(remotes)) {install.packages("remotes")}
  remotes::install_github("cdr-book/CDR")
  }
```

Accidentes de tráfico en la Ciudad de Madrid registrados por Policía Municipal con víctimas y/o daños al patrimonio en el 2020. Los datos se han descargado del [Portal de datos abiertos del Ayuntamiento de Madrid.](https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b284f1a5a0/?vgnextoid=7c2843010d9c3610VgnVCM2000001f4a900aRCRD&vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&vgnextfmt=default))
:::

# Cómo y dónde se producen los accidentes en Madrid

Esta mañana estaba tan tranquilo en mi oficina (trabajo en el distrito de Chamartín para el Ayuntamiento) y me sueltan de repente: "el jefe quiere verte". Lo primero que he pensado es que me echaban, como soy un poco "cansa almas"... Pero no, entro en el despacho del jefe... ¡Y allí está Almeida! Que ha oído que he hecho un curso de visualización en la UCLM y me he convertido en un crack de la visualización. Yo no sabía donde meterme, pero he mantenido perfectamente la compostura, como un profesional.

Así que ya me ha ido contando que está muy preocupado con los accidentes y quiere analizar el tema, para buscar soluciones. Que me agradecería mucho si encontramos dónde está el problema, para bajar el número y gravedad de los accidentes en la ciudad. El problema, me dice, es que solo me puede facilitar los datos del año 2020. Ya le he avisado de que es un año muy particular, por el estado de alarma, pero algo sacaremos...

# Entender el contexto

::: {.callout-tip}
## Cómo definir el propósito y la audiencia de tu análisis

¿Qué le interesa al alcalde? Bajar la tasa de accidentes. Pero desde el punto de vista de la visualización, está claro que va a necesitar información georreferenciada, por lo que haremos mapas. Por otro lado, seguro que la dimensión es importante, porque no es lo mismo Madrid en agosto que un día de lluvia en calendario escolar...

En cualquier caso, lo primero es hacer un análisis exploratorio para ver si hay algo raro en los datos y analizar mínimamente las variables de interés. Y después, le vamos a preparar los gráficos necesarios para **aportarle conocimiento** sobre los accidentes en la ciudad.
:::

```{r}
#| code-summary: Configuración inicial y datos

library(CDR)
library(tidyverse)
library(sf)
library(mapSpain)
library(tidyterra)
library(lubridate)
library(data.table)
library(gplots)
library(RColorBrewer)
library(leaflet)
library(leaflet.extras)
library(ggmosaic)
```

# Elegir una visualización adecuada

::: {.callout-tip}
## Selección de gráficos y visualizaciones que mejor representen tus datos.
:::

## Almeida quiere saber cómo y dónde se producen los accidentes en Madrid

::: {#exr-1}
¿Dónde se han producido los accidentes de tráfico en Madrid en el 2020?
:::

```{r}
#| code-summary: primer mapa

data(accidentes2020_data)

ggplot(data = accidentes2020_data,
       aes(x = coordenada_x_utm, y = coordenada_y_utm)) + 
  geom_point() +
  coord_fixed()
```

## El desorden es tu enemigo

Deja mucho que desear, ¿verdad?: no tenemos información, solo unos datos representados en un gráfico. Con muy poco, tirando de estética (reduciendo la dimensión de los puntos para que se vea el fondo) y alguna referencia geográfica (en forma de mapa de carreteras), veremos cómo se reduce la carga cognitiva:

```{r}
#| code-summary: primer mapa mejorado

accidentes2020_sf <- st_as_sf(accidentes2020_data,
  coords = c("coordenada_x_utm", "coordenada_y_utm"),
  crs = 25830 # proyección ETRS89/ UTM zone 30N. Área de uso: Europa  
  )  

madrid <- esp_get_munic(munic = "^Madrid$") |>
  st_transform(25830) 

# descarga imagen de un de mapa estático de las carreteras de Madrid
tile <- esp_getTiles(madrid, "IDErioja", zoommin = 2)  

ggplot() +
  geom_spatraster_rgb(data = tile) +
  geom_sf(data = accidentes2020_sf, 
    col = "blue", size = 0.05, alpha = 0.3) +
  coord_sf(expand = FALSE) +
  labs(title = "¿Dónde se producen los accidentes de tráfico en Madrid?")
```

¡Esto ya es otra cosa! Apreciamos, lógicamente, la concentración de accidentes en el centro de la ciudad y, especialmente, en las arterias principales.

## El cuándo

Además, como hemos comentado, tenemos conocimiento a priori sobre la influencia de la fecha en el aumento de tráfico, por lo que probablemente encontremos alguna influencia de la dimensión temporal. Vamos a verlo...

::: {#exr-2}
¿Cuándo se han producido los accidentes? 
:::

```{r}
#| code-summary: primer gráfico del cuándo

ggplot(data = accidentes2020_data,
       aes(x = fecha, y = hora)) + 
  geom_point() +
  theme_minimal()
```

## Eliminemos de nuevo el desorden

Vamos a separar la fecha y la hora, porque en ese gráfico no vemos casi nada...

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

```{r}
#| eval: false
# Convertir la columna 'fecha' a formato Date
accidentes2020_data$fecha <- as.Date(accidentes2020_data$fecha, format = "%d/%m/%Y")

accidentes2020_fecha <- accidentes2020_data |>
  select(fecha) |>
  group_xxxxx(_____) |>
  mutate(n = n()) |>
  unique()

ggplot(data = accidentes2020_fecha,
       aes(x = fecha, y = n)) + 
  geom_xxxxx() +
  theme_minimal()
```

```{r}
#| code-summary: gráfico del cuándo según el día
#| echo: false

# Convertir la columna 'fecha' a formato Date
accidentes2020_data$fecha <- as.Date(accidentes2020_data$fecha, format = "%d/%m/%Y")

accidentes2020_fecha <- accidentes2020_data |>
  select(fecha) |>
  group_by(fecha) |>
  mutate(n = n()) |>
  unique()

ggplot(data = accidentes2020_fecha,
       aes(x = fecha, y = n)) + 
  geom_line() +
  theme_minimal()
```

Como ya le advertimos al alcalde, el año 2020 no es bueno para sacar conclusiones. Ya le hemos pedido que nos facilite datos más amplios para poder proporcionarle una mejor visualización del número de accidentes por fecha, pero mientras tanto, nos tendremos que arreglar con lo que tenemos...

```{r}
#| code-summary: gráfico del cuándo según la hora

# Convertir la columna 'hora' a formato Date
accidentes2020_data$hora_dia <- hour(as.POSIXct(accidentes2020_data$hora, format = "%H:%M:%S"))

accidentes2020_hora_dia <- accidentes2020_data |>
  select(hora_dia) |>
  group_by(hora_dia) |>
  mutate(n = n()) |>
  unique()

ggplot(data = accidentes2020_hora_dia,
       aes(x = hora_dia, y = n)) + 
  geom_line() +
  theme_minimal()
```

Es evidente que la hora punta a mediodía y en la salida del trabajo, a las 14 y las 19 horas del día son los 2 picos a vigilar. Pero este gráfico tiene un gran margen de mejora. Hala, a trabajar un poquito y a dejarlo "niquelao", que ya sabéis muchas cosas, cracks:

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

```{r}
#| eval: false

ggplot(data = accidentes2020_hora_dia,
       aes(x = hora_dia, y = n)) + 
  geom_xxxx(linewidth = 1, color = "orange") +
  labs(_____ = "Número de accidentes según la franja horaria del día",
       subtitle = "Las 14 y las 19 horas presentan el mayor número de accidentes",
       x = "Hora del día", y = "Número de accidentes en la franja horaria") +
  scale_y__________(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  theme________() +
  theme(axis.title.x = element_____(hjust = 0),
        axis.title.y = element_text(hjust = 1))
```

```{r}
#| echo: false
#| code-summary: gráfico mejorado del cuándo según la hora

ggplot(data = accidentes2020_hora_dia,
       aes(x = hora_dia, y = n)) + 
  geom_line(linewidth = 1, color = "orange") +
  labs(title = "Número de accidentes según la franja horaria del día",
       subtitle = "Las 14 y las 19 horas presentan el mayor número de accidentes",
       x = "Hora del día", y = "Número de accidentes en la franja horaria") +
  scale_y_continuous(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  theme_minimal() +
  theme(axis.title.x = element_text(hjust = 0),
        axis.title.y = element_text(hjust = 1))
```

::: {#exr-3}
¿De qué tipo son los accidentes? 
:::

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `xxxxx` para obtener el resultado propuesto.
:::

```{r}
#| eval: false

accidentes2020_data <- accidentes2020_data |>
  mutate_if(is.character, as.factor)

accidentes2020_data |>
  count(tipo_accidente) |>
  mutate(porcentaje = 100 * n / sum(n))
```

```{r}
#| echo: false
accidentes2020_data <- accidentes2020_data |>
  mutate_if(is.character, as.factor)

accidentes2020_data |>
  count(tipo_accidente) |>
  mutate(porcentaje = 100 * n / sum(n))
```

Las tablas también son elementos de visualización. En este caso, hay algo evidente que hacer, pero lo vamos a explicar con el siguiente gráfico:

## El tipo de accidente

```{r}
#| code-summary: tipos de accidente

accidentes2020_data |>
  ggplot() +
  geom_bar(aes(y=tipo_accidente), fill = "orange", alpha = 0.6) +
  theme_bw()
```

¿Qué le falta a este gráfico?¿En qué se puede mejorar? Pues está muy claro: ordenar las categorías. Si no están ordenadas tardamos mucho en determinar, por ejemplo, cuál es la tercera, o la quinta... Únicamente la más importante es relativamente fácil de situar. Pero veamos cuando ordenamos las categorías:

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

```{r}
#| eval: false

ggplot(accidentes2020_data, aes(y = reorder(tipo_accidente,
                                            -tipo_accidente,
                                            length))) +
  geom_xxxxx(fill = "orange", alpha = 0.6) +
  labs(title = "Tipos de accidente en Madrid durante el año 2020",
       subtitle = "Sobresalen la colisión fronto-lateral y el alcance",
       x = "Número de accidentes", y = "") +
  scale_x_continuous(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  theme_bw() +
  theme(axis.title.x = element_text(_____ = 0))
  
```

```{r}
#| echo: false
#| code-summary: tipos de accidente (ordenado)

ggplot(accidentes2020_data, aes(y = reorder(tipo_accidente,
                                            -tipo_accidente,
                                            length))) +
  geom_bar(fill = "orange", alpha = 0.6) +
  labs(title = "Tipos de accidente en Madrid durante el año 2020",
       subtitle = "Sobresalen la colisión fronto-lateral y el alcance",
       x = "Número de accidentes", y = "") +
  scale_x_continuous(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  theme_bw() +
  theme(axis.title.x = element_text(hjust = 0))
  
```

## Otras visualizaciones

Existen visualizaciones útiles para tablas de contingencia como los balloonplots. Veamos un ejemplo entre el sexo y el tipo de persona con la función 'balloonplot()' del paquete 'gplots()'...

::: {#exr-4}
¿Existe asociación entre el sexo y el tipo de persona (conductor, pasajero, peatón) que sufre el accidente?
:::

```{r}
#| code-summary: Tabla de contingencia sexo-tipo de persona

balloonplot(table(accidentes2020_data$sexo,
                  accidentes2020_data$tipo_persona),
            main = "Tabla de contingencia de sexo y tipo de persona")
```

Otras formas de visualizar asociaciones es usar mosaicos, aunque deben evitarse si las variables incluyen un número importante de factores, como es el caso siguiente:

::: {#exr-5}
¿Existe asociación entre el sexo y el tipo de accidente?
:::

```{r}
#| code-summary: asociación sexo-tipo

accidentes2020_data |>
ggplot() +
  geom_mosaic(aes(x = product(tipo_accidente, sexo), 
                  fill=sexo)) 
```

Otra posibilidad es usar facetas para detectar asociaciones. Por ejemplo, veamos los tipos de accidente y el estado meteorológico en el momento del accidente. Como podemos observar, **la carga cognitiva aumenta con el número de categorías de las variables** (17 para el tipo de accidente y 7 para la meteorología)

```{r}
niveles <- levels(factor(accidentes2020_data$tipo_accidente))
etiquetas <- set_names(str_wrap(niveles, width = 20), 
                       niveles)
accidentes2020_data  |>
  ggplot(aes(sexo, fill = estado_meteorológico)) +
  facet_wrap(vars(tipo_accidente), 
             labeller = as_labeller(etiquetas)) +
  geom_bar() +
  labs(fill = "Estado Meteorológico") +
  theme(axis.text.x  = element_text(angle = 90)) +
  theme_minimal()
```

## Visualizaciones específicas georreferenciadas

Una categoría especial, y que merece mucho la pena destacar, cuando tenemos información georreferenciada, son los mapas interactivos. Una de las librerías más populares para construirlos es 'leaflet', que usa los mapas de OpenStreetMap, permitiendo incluir los mapas físicos de ESRI.

```{r}
#| code-summary: mapa interactivo con leaflet

accidentes2020_sf <- st_transform(accidentes2020_sf, crs = 4326)
accidentes2020_data$longitude <- st_coordinates(accidentes2020_sf)[, 1]
accidentes2020_data$latitude <- st_coordinates(accidentes2020_sf)[, 2]

leaflet(data = accidentes2020_data) |>
  addTiles() |>
  addCircleMarkers(lng = ~longitude, lat = ~latitude, 
                   radius = 1, color = "red", opacity = 0.5)  
#  addProviderTiles(providers$Esri.WorldImagery)
```

Si incluimos los mapas físicos de ESRI queda así (en cada caso habrá que valorar si interesa):

```{r}
#| code-summary: mapa interactivo con leaflet y ESRI

utm_crs <- "+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs"
accidentes_sf <- st_as_sf(accidentes2020_data, 
                          coords = c("coordenada_x_utm", "coordenada_y_utm"), crs = utm_crs)
accidentes_sf <- st_transform(accidentes_sf, crs = 4326)
accidentes2020_data$longitude <- st_coordinates(accidentes_sf)[, 1]
accidentes2020_data$latitude <- st_coordinates(accidentes_sf)[, 2]

leaflet(data = accidentes2020_data) |>
  addTiles() |>
  addCircleMarkers(lng = ~longitude, lat = ~latitude, 
                   radius = 2, color = "red", opacity = 0.5) |>
  addProviderTiles(providers$Esri.WorldImagery)
```

## Piensa como un diseñador

Estas visualizaciones están muy bien pero... ¿y si pudiéramos aminorar la carga cognitiva del mapa interactivo? Una forma de hacerlo es usar agrupaciones. Veamos cómo hacerlo.

```{r}
#| code-summary: mapa interactivo con clusters

leaflet(data = accidentes2020_data) |>
  addTiles() |>
  addCircleMarkers(lng = ~longitude, lat = ~latitude, 
                   radius = 2, color = "red", opacity = 0.5, clusterOptions = markerClusterOptions())
```

Otra forma de visualizar que permite 'leaflet' son los mapas de calor:

```{r}
#| code-summary: mapa de calor con leaflet

leaflet(data = accidentes2020_data) |>
  addTiles() |>
  addHeatmap(lng = ~longitude, lat = ~latitude, blur = 50, max = 0.05)
```
::: {#exr-6}
Esta visualización la podemos configurar con los parámetros. Es tu turno: juega con ellos y consigue una gradación e intensidad de colores a tu gusto.
:::

```{r}
#| eval: false

leaflet(data = accidentes2020_data) |>
  addTiles() |>
  addHeatmap(lng = ~longitude, lat = ~latitude,
             blur = _____, max = _____)
```

# Contar una historia

::: {.callout-tip}
## Cómo narrar una historia convincente con tus datos.

Hemos visto el **planteamiento**, en el que proporcionamos el contexto: el mismísimo alcalde de Madrid se ha enterado de nuestras excelentes capacidades y nos ha pedido ayuda...

El análisis exploratorio nos ha ido introduciendo en la **trama**, donde descubrimos que hay una **fuerte dependencia de la hora del día y del lugar donde se produce el accidente**.

Pero como siempre, lo más importante es el **desenlace**, donde le estamos dando al alcalde las conclusiones más interesantes, que podríamos resumir en un par de gráficos:

-   Con el gráfico de evolución del número de accidentes a lo largo del día va a saber que (es lógico) que **en las 14 y 19 horas se producen el mayor número de accidentes**.

-   Con un **mapa interactivo (podemos elegir cuál nos proporciona la mejor visualización)** le damos la posibilidad de mirar de forma dinámica qué zonas son las que necesitan más acciones de protección.
:::

## Para pensar:

Nosotros te hemos propuesto un par de visualizaciones, pero puede que no estés de acuerdo... ¿Qué visualizaciones utilizarías en el desenlace, para aportarle el mayor conocimiento a Almeida sobre los accidentes de tráfico de su ciudad?
