---
title: "¿Qué pasa con la renta municipal en España?"
author:
  - Gema Fernández-Avilés (Gema.FAviles@uclm.es)
  - Isidro Hidalgo (Isidro.Hidalgo@uclm.es)
format:
  html:
    theme: cerulean
    highlight-style: ayu-mirage
    self-contained: true
    lang: es
    date: 01/16/2025
    date-format: long
    embed-resources: true
    toc-title: Summary
    toc: true
    number-sections: true
    preview-links: auto
    code-link: true
    code-fold: true
number-sections: true
execute:
  echo: true
  eval: true
  output: true
  include: true
  freeze: auto
  fig-height: 5
  warning: false
  comment: "#>"
  code-line-numbers: true
  code-copy: true
  code-overflow: scroll
  code-fold: true
---

::: {.callout-note}
Los datos que se utilizan en esta historia están disponibles en el paquete `CDR` que puede instalarse con el siguiente comando (se comprueba si no lo está):

``` {r}
#| code-summary: Instalación y/o carga del paquete `CDR`

if (!require(CDR)){
  if (!require(remotes)) {install.packages("remotes")}
  remotes::install_github("cdr-book/CDR")
  }
```

Renta Neta per cápita (en euros) por municipios, distritos y secciones censales. Esta información se ha extraído del "Atlas de distribución de renta de los hogares", proporcionado por el Instituto Nacional de Estadística y ha sido procesada para facilitar el análisis. Se encuentran en el objeto `renta_municipio_data`.
:::

# ¿Qué pasa con la renta municipal en España?

Trabajo en una compañía privada que quiere introducir un producto de alta gama, y me ha pedido el jefe que le haga un informe sobre la renta municipal en España de los últimos años, porque el CEO quiere ampliar el mercado a determinados tramos de renta, y necesita localizar caladeros de negocio. Me ha dicho que los datos los puedo sacar del paquete `CDR`. También me ha dicho que están limpios, pero no me fío.

# Entender el contexto

::: {.callout-tip}

## Cómo definir el propósito y la audiencia de tu análisis

¿Por qué es importante? Porque no da lo mismo analizar la renta municipal como administración que como empresario que busca oportunidades de negocio. En el primer caso, se busca entender la distribución de la renta para poder diseñar políticas públicas que reduzcan la desigualdad. Probablemente, no estamos tan interesados en los municipios más ricos, sino en los más pobres. Pero como somos gente de empresa, buscamos identificar segmentos de mercado con capacidad de compra para ofrecer un producto de alta gama, por lo que nos interesa saber dónde vive la gente con más dinero.

En cualquiera de los dos casos, lo primero es hacer un análisis exploratorio para ver si hay algo raro en los datos y analizar mínimamente las variables de interés. Y después, le vamos a preparar al jefe un par de gráficos para que vea que somos unos cracks **aportándole conocimiento**.
:::

```{r}
#| code-summary: Configuración inicial y datos

library(CDR)
library(tidyverse)
library(summarytools)
library(explore)
library(patchwork)
library(sf)
library(classInt)
library(visdat)

rellenos <- "azure3"
lineales <- "darkblue"

head(renta_municipio_data)
help(renta_municipio_data)
str(renta_municipio_data)
```

## Limpieza (siempre hay que empezar por aquí)...

Vemos que hay mezcla de secciones censales, distritos y municipios. Vamos a quedarnos solo con los municipios (ya sabía yo que habría que hacer un poco de limpieza, ¡no me libro de la ciberescoba ni a tiros!)...

```{r municipios}
#| code-summary: Eliminamos todo lo que no son municipios

renta_municipio_data <- renta_municipio_data[substr(
  renta_municipio_data$Unidad, 6, 6) == " ",]
```

::: {#exr-1}
¿Que hacemos con los datos faltantes? En este análisis eliminarlos. Veamos por qué...
:::

```{r}
#| code-summary: Eliminamos registros con datos faltantes

# Forma rápida y visual con el paquete visdat
vis_miss(renta_municipio_data)

# Forma más artesanal, pero más precisa:
apply(renta_municipio_data, 1, function(x) sum(is.na(x))) |>
  table()
# Podríamos imputar con la mediana y salvar los registros de los municipios con 1 ó 2 faltantes, pero para visualización, ya tenemos más de 6.000 y no merecen la pena 205 más, así que eliminamos los municipios con datos faltantes:
renta <- renta_municipio_data |>
   drop_na()
head(renta)

# Siempre debemos echar un vistazo rápido a los datos:
summary(renta)
renta |> explore_all()
```


::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `xxx` para obtener el resultado propuesto.
:::

```{r probl1}
#| eval: FALSE

vis_xxxx(renta_municipio_data)
```

¡Esto ya es otra cosa! Ahora sí que podemos empezar a trabajar con datos limpios (los ingleses los llaman "tidy data").

# Elegir una visualización adecuada

::: {.callout-tip}
## Selección de gráficos y visualizaciones que mejor representen tus datos.
:::

## Renta municipal media en España

::: {#exr-2}
¿Cuál es la renta per cápita media de los municipios españoles del último año disponible (2019)?
:::

```{r}
summary(renta$`2019`)
```
::: {.callout-tip}
La renta municipal de los municipios menores de 100 habitantes es la media de la comarca agraria de todos ellos, por eso se repiten muchos valores. Si queréis analizar la renta del mundo rural... en España no se puede hacer, salvo pagando al INE el análisis:

```{r}
valores <- renta$`2019` |>
  table()
head(valores[order(valores, decreasing = TRUE)], 20)
```
:::

## Distribución de la renta por municipios

::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `xxx` para obtener el resultado propuesto. Sólo tienes que especificar la función a utilizar.
:::

::: {#exr-3}
¿Es la renta media la misma en todos los municipios?
:::

```{r probl2}
#| eval: false

renta |>
  select(`2019`) |>
  xxxxx()
```

```{r}
#| echo: false

renta |>
  select(`2019`) |>
  descr()
```

¡Qué lio! Mejor un gráfico que una tabla (J. Tukey)

```{r renta-hist}
ggplot(data = renta, aes(x=`2019`)) +
  geom_histogram() #30 bins por defecto
```

¡Qué histograma más feo! Vamos a mejorarlo

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

```{r renta-hist-beauty-hw}
#| eval: false

p_renta_2019 <- ggplot(renta, aes(`2019`)) +
  geom_xxxxxx(col = rellenos,
                 fill = rellenos, 
                 bins = nclass.Sturges(renta_municipio_data$`2019`)) +
  geom_xxxxxx(aes(xintercept = mean(`2019`)),
             color = lineales,
             linetype = "dashed",
             linewidth = 1) +
  geom_xxxxxx(aes(x = mean(`2019`),
                y = 100,
                label = round(mean(`2019`), 2)),
            color = lineales) +
  labs(title = "Distribución de la renta por municipios",
       x = "Renta per cápita",
       y = "Frecuencia") +
  theme_xxxxxx()

p_renta_2019 
```


```{r renta-hist-beauty}
#| echo: false

p_renta_2019 <- ggplot(renta, aes(`2019`)) +
  geom_histogram(col = rellenos,
                 fill = rellenos, 
                 bins = nclass.Sturges(renta_municipio_data$`2019`),
                 alpha = 0.4) +
  geom_vline(aes(xintercept = mean(`2019`)),
             color = lineales,
             linetype = "dashed",
             linewidth = 1) +
  geom_text(aes(x = mean(`2019`),
                y = 100,
                label = round(mean(`2019`), 2)),
            color = lineales) +
  labs(title = "Distribución de la renta por municipios",
       x = "Renta per cápita",
       y = "Frecuencia") +
  scale_x_continuous(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  scale_y_continuous(labels = function(x) {
    format(x,
      big.mark = ".", decimal.mark = ",", scientific = FALSE
    )
  }) +
  theme_minimal() +
  theme(axis.title.x = element_text(hjust = 0),
        axis.title.y = element_text(hjust = 1))

p_renta_2019 
```

::: {#exr-4}
¿Sería mejor tener un gráfico de densidad? ¿Cómo se interpretaría?
¿Qué diferencias hay respecto al histograma?
:::

```{r}
p_renta_2019_density <- ggplot(renta, aes(`2019`)) +
  geom_density(fill = rellenos,
               alpha= 0.4,
               color= rellenos,
               lwd = 1) +
  geom_vline(aes(xintercept = mean(`2019`)),
             color = lineales,
             lwd = 1,
             linetype = "dashed") +
  geom_text(aes(x = mean(`2019`),
                y = 0.00001,
                label = round(mean(`2019`), 2)),
            color = lineales) +
  labs(title = "Distribución de la renta por municipios",
       x = "Renta per cápita",
       y = "Densidad") +
  theme_minimal() +
  theme(axis.title.x = element_text(hjust = 0),
        axis.title.y = element_text(hjust = 1))

p_renta_2019_density
```

::: {#exr-5}
¿Cuál me gusta más? ¿Histograma o densidad? ¿Juntos?
:::

```{r renta-density2}
p_renta_2019_density + 
  geom_histogram(aes(y=..density..),
                 fill = rellenos,
                 color= rellenos,
                 alpha = 0.4)
```

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

::: {#exr-6}
¿Por qué no tener un 5-summary plot? ¿Qué nos dice?
:::

```{r}
#| eval: false

p <- renta |>
  ggplot(aes(x = 0, y = `2019`)) 

boxplot <- p + 
  geom_xxxxxxx(color = lineales, fill = rellenos, alpha = 0.4) +
  theme_minimal()

violin <- p + geom_xxxxxx(color = lineales, fill = rellenos,
                          alpha = 0.4) +
  theme_minimal()

boxplot + violin
```

```{r}
#| echo: false

p <- renta |>
  ggplot(aes(x=0, y= `2019`)) 

boxplot <- p + 
  geom_boxplot(color = lineales, fill = rellenos, alpha = 0.4) +
  theme_minimal()

violin <- p + geom_violin(color = lineales, fill = rellenos,
                          alpha = 0.4) +
  theme_minimal()

boxplot + violin
```

## Evolución de la renta municipal

::: {#exr-7}
¿En los años anteriores la renta ha sido similar?
:::

```{r}
p <- renta |>
  ggplot(aes(x=0, y= `2015`))

p + geom_violin(aes(fill = "2015")) +
  geom_violin(aes(x=1, y= `2016`, fill = "2016")) +
  geom_violin(aes(x=2, y= `2017`, fill = "2017")) +
  geom_violin(aes(x=3, y= `2018`, fill = "2018")) +
  geom_violin(aes(x=4, y= `2019`, fill = "2019")) +
  
  # añadimos la media de cada año a los violines:
  geom_point(aes(x=0, y=mean(`2015`)), color = "red") +
  geom_point(aes(x=1, y=mean(`2016`)), color = "red") +
  geom_point(aes(x=2, y=mean(`2017`)), color = "red") +
  geom_point(aes(x=3, y=mean(`2018`)), color = "red") +
  geom_point(aes(x=4, y=mean(`2019`)), color = "red") +
  theme_minimal() +
  scale_x_continuous(breaks = c(0, 1, 2, 3, 4),
          labels = c("2015", "2016", "2017", "2018", "2019")) +
  labs(title = "Distribución de la renta por municipios",
       x = "Año", y = "Renta per cápita (euros)")
```

# Eliminar el desorden. Enfocar la atención

::: {#exr-8}
¿Es necesario el color? ¿Queremos ver también la evolución a lo largo del tiempo? Pues quizá podemos matar dos pájaros de un tiro... veamos:
:::

```{r}
medias <- renta |>
  summarise(across(`2015`:`2019`, mean, na.rm = TRUE)) |>
  pivot_longer(cols = `2015`:`2019`,
               names_to = "pos",
               values_to = "renta") |>
  mutate(pos = as.numeric(pos) - 2015)
p <- renta |>
  ggplot(aes(x=0, y= `2015`))

p + geom_violin( ) +
  geom_violin(aes(x = 0, y = `2015`), fill = rellenos, col = rellenos) +
  geom_violin(aes(x = 1, y = `2016`), fill = rellenos, col = rellenos) +
  geom_violin(aes(x = 2, y = `2017`), fill = rellenos, col = rellenos) +
  geom_violin(aes(x = 3, y = `2018`), fill = rellenos, col = rellenos) +
  geom_violin(aes(x = 4, y = `2019`), fill = rellenos, col = rellenos) +
  
  # añadimos la media de cada año al violín:
  geom_point(aes(x = 0, y = mean(`2015`)), color = lineales) +
  geom_point(aes(x = 1, y = mean(`2016`)), color = lineales) +
  geom_point(aes(x = 2, y = mean(`2017`)), color = lineales) +
  geom_point(aes(x = 3, y = mean(`2018`)), color = lineales) +
  geom_point(aes(x = 4, y = mean(`2019`)), color = lineales) +
  
  # añadimos la línea de tendencia uniendo las medias:
  geom_line(data = medias, aes(x = pos, y = renta, group = 1),
            color = lineales) +
  scale_x_continuous(breaks = c(0, 1, 2, 3, 4),
                     labels = c("2015", "2016", "2017", "2018", "2019")) +
  scale_y_continuous(
    labels = function(x) {
      format(x,
        big.mark = ".",
        decimal.mark = ",", scientific = FALSE
      )
      }
    ) +
  labs(title = "La renta per cápita sube ligeramente cada año",
       x = "", y = "Renta per cápita (€)") +
  theme_minimal() +
  theme(axis.title.x = element_text(hjust = 0),
        axis.title.y = element_text(hjust = 1))
```

## Distribución geográfica de la renta municipal en España

::: {#exr-9}
¿Son los municipios de norte más ricos que los del sur de España en 2019?
:::

```{r}
help(municipios)

munis_renta <- municipios |>
  left_join(renta) |>   # une datasets
  select(name, cpro, ine.prov.name, cmun,
       `2015`,`2016`,`2017`,`2018`,`2019`) # selecciona variables
```

```{r}
ggplot(munis_renta) +
  geom_sf(aes(fill = `2019`), color = NA) +
  scale_fill_continuous(labels = function(x) {
    format(x, big.mark = ".", decimal.mark = ",",
           scientific = FALSE, suffix = "€"
    )
    }
    ) +
  theme_minimal()
```

## De nuevo, cuidamos el enfoque

El gráfico anterior, debido a la escala de colores continua, tiende a uniformizar los municipios, por lo que podemos dar una idea equivocada... ¡no podemos "mentir" con nuestras visualizaciones!

¿Cómo podemos arreglarlo? Usando el **método Fisher-Jenks** para optimizar la segmentación en clases, y transformar el gráfico usando una variable discreta.

```{r}
munis_renta_clean <- munis_renta |>
  filter(!is.na(`2019`))

# crea clases con Fisher-Jenks
fisher <- classIntervals(munis_renta_clean$`2019`,
                         style = "fisher",
                         n = 10)
ggplot(munis_renta_clean) +
  geom_sf(aes(fill = cut(`2019`, fisher$brks)), color = NA) +
  scale_fill_viridis_d(option= "inferno", direction = -1,
                       labels= scales::label_number(suffix= "€")) +
  guides(fill = guide_colorsteps()) +
  labs(fill= "Fisher-Jenks") +
  theme_minimal()
```

## Distribución por provincias

::: {#exr-10}
¿Cuál es la provincia con mayor renta media municipal en 2019? ¿Y la que menos renta media tiene?
:::

```{r}
munis_renta |>
  ggplot(aes(x = `2019`, y = ine.prov.name, color = cpro)) +
  geom_point() +
  labs(title = "Renta per cápita por provincia en 2019",
       x = "Renta per cápita",
       y = "Provincia") +
  theme_minimal() +
  theme(legend.position = "none")
```
## Una vez más, cuidamos el enfoque

Mejor ordenamos las provincias. Y de nuevo, ¿nos aporta el color y la distribución o nos vale con un valor medio por provincia?

```{r}
munis_renta2 <- munis_renta |>
  group_by(ine.prov.name) |>
  summarise(pro2019 = mean(`2019`, na.rm = TRUE)) |>
  arrange(desc(pro2019)) |>
  st_drop_geometry() |>
  filter(!is.na(pro2019))
munis_renta2_plot <- ggplot(munis_renta2, aes(y = pro2019,
                         x = reorder(ine.prov.name, pro2019)),
                         color = lineales) +
  geom_segment(aes(x= reorder(ine.prov.name, pro2019),
                   xend = reorder(ine.prov.name, pro2019),
                   y = 0,
                   yend = pro2019),
               color = lineales) +
  geom_point() +
  coord_flip() +
  labs(title = "Renta per cápita por provincia en 2019",
       x = "Renta per cápita",
       y = "Provincia") +
  theme_minimal()
munis_renta2_plot
```

# Contar una historia

::: {.callout-tip}
## Cómo narrar una historia convincente con tus datos.

Hasta ahora hemos visto el **planteamiento**, en el que proporcionamos el contexto: trabajamos para una empresa que quiere posicionar un producto de alta gama...

El análisis exploratorio de las variables, de forma aislada o combinada, nos introduce en la **trama**, donde descubrimos aspectos interesantes de nuestros datos: la renta es asimétrica, con **municipios de más renta**, que es lo que nos interesa. Además, vemos que la **renta tiende a subir con los años**, lo que también nos viene de perlas.

Pero como siempre, lo más importante es el **desenlace**, donde le estamos dando a nuestro jefe las claves que necesita:

-   Con el gráfico de evolución de la distribución le damos 2 claves: **hay municipios de mayor renta**, y **la renta tiende a subir con el tiempo**.

-   Gráficos de localización de los municipios de mayor renta: podríamos usar el **mapa de distribución de la renta en España** o el **lollipop de provincias ordenado por renta**.
:::

## Para pensar:

Supongamos que el producto fuera de primera necesidad, su producción ligada al territorio y la renta no fuera la variable decisoria. ¿Qué visualización utilizarías en el desenlace, el lollipop de renta por provincias o el de distribución municipal por provincias?

::: {.callout-pista}
pista: logística
:::
