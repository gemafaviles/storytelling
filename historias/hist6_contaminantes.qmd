---
title: "Contaminación en el aire en la ciudad de Madrid"
author:
  - Gema Fernández-Avilés (Gema.FAviles@uclm.es)
  - Isidro Hidalgo (Isidro.Hidalgo@uclm.es)
format: html
theme: cerulean
highlight-style: ayu-mirage
self-contained: true
date: "`r Sys.Date()`"
code-link: true
number-sections: true
execute:
  code-overflow: scroll
  echo: true
  eval: true
  output: true
  include: true
  freeze: auto
  fig-height: 5
  warning: false
  code-fold: true
  comment: "#>"
  code-line-numbers: true
  code-copy: true
#bibliography: biblio.bib
---

::: {.callout-note}
Los datos que se utilizan en esta historia están disponibles en el paquete `CDR`
que puede instalarse con el siguiente comando:

```r
install.packages("remotes")
remotes::install_github("cdr-book/CDR")
```
Son datos abiertos proporcionados por el portal [Portal de datos abiertos del Ayuntamiento de Madrid](https://datos.madrid.es/). Concretamente, los facilitados por [el Sistema Integral de la Calidad del Aire del Ayuntamiento de Madrid](https://www.mambiente.madrid.es/sica/scripts/index.php), que pone a disposición los datos de los contaminantes registrados por las estaciones de medición situadas en Madrid. Los datos son de frecuencia horaria por anualidades desde 2001 y los datos se actualizan de forma mensual.

:::


Pasos:

1. La importancia del contexto.  
2. La elección de un gráfico efectivo. 
3. El desorden es tu enemigo.  
4. Centra la atención de tu audiencia.  
5. Piensa como un diseñador. 
6. Cuenta la historia de tus datos. El archo narrativo.




# La importancia del contexto

Es crucial proporcionar el contexto adecuado para que los lectores comprendan de dónde provienen los datos y por qué son relevantes.

```{r}
library(CDR) # Para los datos de temperatura
head(contam_mad)
str(contam_mad)

library(tidyverse)

library(DT)
datatable(contam_mad[1:5, ])

# Presentar las primeras líneas de los datos
head(contam_mad, 3) 
tail(contam_mad, 3) 

# Ver la dimensión de la tabla de datos
dim(contam_mad)
```



::: {.callout-warning}
## Complejidad de los datos

Los conjuntos de datos de la **calidad de aire** son complejos y en algunos casos los datos no pueden utilizarse tal cual y pueden requerir consideraciones cuidadosas antes de llegar a cualquier conclusión. Debe prestarse atención a la existencia de subgrupos.

:::

# La elección de un gráfico efectivo

## Análisis exploratorio de datos


::: {#exr-1}

¿Cuál es el día con mayor y menor concentración de NOx de todo el periodo?.
:::


```{r}
contam_mad |> # Summary por grupo usando dplyr
  na.omit() |> # omitimos los NAs para el análisis
  filter(nom_abv == "NOx") |> # filtramos por NOx
  group_by(fecha) |> # agrupamos por fecha
  summarize(mad_mean = mean(daily_mean)) |> # promedio de las estaciones
  slice(which.max(mad_mean), which.min(mad_mean)) # seleccionamos el máximo y el mínimo
```

El valor máximo, **415 µg/m3 de NOx**, se observa el 21 de diciembre de 2011 y el valor mínimo, **6,32 µg/m3 de NOx**, el 10 de mayo de 2020, en pleno estado de alarma.


::: {#exr-2}

¿Cómo son los datos de PM2.5 en la ciudad de Madrid?
:::

```{r}
contam_mad |> # Summary por grupo usando dplyr
  na.omit() |> # omitimos los NAs para el análisis
  filter(nom_abv == "PM2.5") |> # filtramos por PM2.5
  group_by(id_name) |>
  summarize(
    min = min(daily_mean),
    q1 = quantile(daily_mean, 0.25),
    median = median(daily_mean),
    mean = mean(daily_mean),
    q3 = quantile(daily_mean, 0.75),
    max = max(daily_mean)
  )
```




::: {.callout-tip}
## Informes automáticos en R

Existen paquetes comno, `skimr`, `DataExplorer` y `dlookr` que generan informes 
automáticos con los principales descriptivos.
:::




## ¿Cómo han evolucionado la concentración de contaminantes en la ciudad de Madrid?

::: {#exr-3}

Con las funciones del `tidyverse` represente la evolución de todos los contaminantes
medidos por las estaciones de monitoreo de la ciudad de Madrid en el periodo (2011-200).
:::


```{r evolución-contaminentes, out.width = "100%"}
plot_contam_mad <- contam_mad |>
  group_by(fecha, nom_mag) |>
  summarise(media_estaciones = mean(daily_mean, na.rm = TRUE)) |>
  ggplot(aes(x = fecha, y = media_estaciones)) +
  geom_line() +
  geom_smooth() +
  theme_minimal() +
  facet_wrap(~nom_mag, scales = "free_y")

plot_contam_mad
```

Vamos a mejorar el gráfico anterior para que sea más legible y efectivo.

::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el resultado propuesto.
:::

```{r evolución-contaminantes-personalizado-hw, out.width = "100%"}
#| eval: false

contam_mad |>
  group_by(semana = floor_date(fecha, unit = "_____"), nom_mag) |>
  summarise(media_estaciones = mean(_______, na.rm = TRUE)) |>
  ggplot(aes(x = semana, y = media_estaciones)) +
  geom_xxxxx(aes(color = nom_mag)) +
  geom_xxxxx(size = 0.5, color = "black") +
  scale_color_brewer(palette = "Paired") +
  labs(
    x = NULL, 
    y = "(µg/m3)", 
    ______ = "Evolución de partículas contaminantes en Madrid",
    ______ = "Concentración media semanal en las estaciones de medición",
    ______ = "Fuente: Portal de datos abiertos del Ayuntamiento de Madrid"
  ) +
  theme_xxxxx() +
  theme(legend.position = "none") +
  facet_wrap(~nom_mag, scales = "free_y")
```





```{r evolución-contaminantes-personalizado, out.width = "100%"}
#| echo: false

contam_mad |>
  group_by(semana = floor_date(fecha, unit = "week"), nom_mag) |>
  summarise(media_estaciones = mean(daily_mean, na.rm = TRUE)) |>
  ggplot(aes(x = semana, y = media_estaciones)) +
  geom_line(aes(color = nom_mag)) +
  geom_smooth(size = 0.5, color = "black") +
  scale_color_brewer(palette = "Paired") +
  labs(
    x = NULL, y = "(µg/m3)", title = "Evolución de partículas contaminantes en Madrid",
    subtitle = "Concentración media semanal en las estaciones de medición",
    caption = "Fuente: Portal de datos abiertos del Ayuntamiento de Madrid"
  ) +
  theme_bw() +
  theme(legend.position = "none") +
  facet_wrap(~nom_mag, scales = "free_y")
```




## Los datos faltantes

Antes de continuar, no nos olvidemos de los datos faltantes, a veces
un importante problema en ciencia de datos... ¿Existe algún patrón en los NAs?


::: {#exr-4}

¿Cuántos `NAs` tengo en mi conjunto de datos `contam_mad`?
:::


```{r sum-na}
sum(is.na(contam_mad))
```


::: {#exr-5}

¿Puedo visualizar dónde están los datos faltantes por estación de monitoreo a lo largo del tiempo?
:::


```{r na-where}
na_table <- contam_mad |>
  mutate(isna = is.na(daily_mean)) |>
  ggplot(aes(x = fecha, y = id_name, fill = isna)) +
  geom_raster() +
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "lightblue"))  

na_table
```


::: {#exr-6}

¿Qué hacemos con los `NAs`?
:::


**Opción 1: Eliminar los NAs**
```{r}
contam_mad_clean <- contam_mad |>
  drop_na()

summary(is.na(contam_mad_clean))
```


**Opción 2: Imputar NAs con el día anterior**

```{r}
contam_mad_dia_antes <- contam_mad |>
  arrange(estaciones, nom_abv, fecha) |>
  fill(daily_mean)

summary(is.na(contam_mad_dia_antes))
```
```{r}
#imputar los na con la mediana de la estación

contam_mad_mediana <- contam_mad |>
  group_by(estaciones) |>
  fill(daily_mean, .direction = "updown")
```


::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el resultado esperado.
:::



```{r}
#| eval: false
summary(____(contam_mad_mediana))
```


```{r}
#| echo: false
summary(is.na(contam_mad_mediana))
```


# El desorden es tu enemigo: calendario de contaminantes 

Mantén el código limpio y organizado para facilitar su comprensión y mantenimiento. Veamos un ejemplo con el siguiente ejemplo. Una herramienta muy útil para tener una visión general de estos contaminantes es viendo el calendario como un heatmap: **calendar heatmap**

Preparamos un código para visualizar la concentración media de los contaminantes en Madrid a lo largo del tiempo en forma de calendario que pueda ser utilizado para cualquier contaminante.

```{r calendar}
calendar_plot <- contam_mad |>
  group_by(fecha, nom_mag, nom_abv, ud_med) |>
  summarize(valor_promedio = mean(daily_mean, na.rm = T))

# Dates as factors
months <-
  seq.Date(
    from = as.Date("2022-01-01"),
    length.out = 12,
    by = "month"
  ) |> format("%B")
wdays <-
  seq.Date(
    from = as.Date("2022-05-30"),
    length.out = 7,
    by = "day"
  ) |> format("%A")

calendar_plot <- calendar_plot |>
  mutate(
    year = format(fecha, "%Y"),
    month = factor(format(fecha, "%B"), levels = months, labels = months),
    wday = factor(weekdays(fecha), levels = wdays, labels = wdays),
    week = as.numeric(format(fecha, "%W"))
  )

calendar_plot <- calendar_plot |>
  group_by(year, month) |>
  mutate(wmonth = 1 + week - min(week))
```


::: {#exr-7}

Calendar heatmap para el NOx
:::


```{r calendar-nox, fig.align='center', fig.width=20, fig.height=20}
i_mag <- "Óxidos de Nitrógeno"    # Seleccionar el contaminante

fill_title <- calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ungroup() |>
  distinct(paste(unique(nom_abv), unique(ud_med)))

calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ggplot(aes(
    x = wmonth,
    y = reorder(wday, -as.numeric(wday)),
    fill = valor_promedio
  )) +
  geom_tile(colour = "white") +
  facet_grid(year ~ month) +
  scale_fill_gradient(low = "yellow", high = "red", ) +
  scale_x_continuous(breaks = 1:5, limits = c(0, 6)) +
  labs(
    x = "Semana del mes",
    y = NULL,
    title = paste0("Concentración de ", i_mag, " por día de la semana"),
    fill = fill_title,
    caption = "Fuente: Red de Vigilancia de la Calidad del Aire del Ayto. de Madrid"
  )
```




```{r calendar-pm10, fig.align='center', fig.width=20, fig.height=20}
#| eval: false
#| echo: false

i_mag <- "Partículas < 10 µm"


fill_title <- calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ungroup() |>
  distinct(paste(unique(nom_abv), unique(ud_med)))

calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ggplot(aes(
    x = wmonth,
    y = reorder(wday, -as.numeric(wday)),
    fill = valor_promedio
  )) +
  geom_tile( ) +
  facet_grid(year ~ month) +
  scale_fill_gradient(low = "lightblue", high = "red", ) +
  scale_x_continuous(breaks = 1:5, limits = c(0, 6)) +
  labs(
    x = "Semana del mes",
    y = NULL,
    title = paste0("Concentración de ", i_mag, " por día de la semana"),
    fill = fill_title,
    caption = "Fuente: Red de Vigilancia de la Calidad del Aire del Ayto. de Madrid"
  )
```

::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el calendario de PM10.
:::



```{r calendar-pm10-hw, fig.align='center', fig.width=20, fig.height=20}
#| eval: false

i_mag <- "_______________"

fill_title <- calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ungroup() |>
  distinct(paste(unique(nom_abv), unique(ud_med)))

calendar_plot |>
  filter(nom_mag == i_mag & year >= 2011) |>
  ggplot(aes(
    x = wmonth,
    y = reorder(wday, -as.numeric(wday)),
    fill = valor_promedio
  )) +
  geom_tile(colour = "white") +
  facet_grid(year ~ month) +
  scale_fill_gradient(low = "________", high = "red", ) +
  scale_x_continuous(breaks = 1:5, limits = c(0, 6)) +
  labs(
    x = "Semana del mes",
    y = NULL,
    title = paste0("Concentración de ", i_mag, " por día de la semana"),
    fill = fill_title,
    caption = "Fuente: Red de Vigilancia de la Calidad del Aire del Ayto. de Madrid"
  )
```






# Centra la atención de tu audiencia

::: {#exr-7}
Nos centramos en los dos contaminantes más problemáticos en la ciudad de Madrid (PM10 y NOx)
:::



```{r seleccionar-variables, out.width = "100%"}
contam_mad_pm10_nox <- contam_mad |>
  filter(nom_abv %in% c("PM10", "NOx"))
```


```{r pm10-nox-time-serie, out.width = "100%"}
# echo: false

plot_pm10_nox <- contam_mad_pm10_nox |>
  group_by(fecha, nom_mag) |>
  summarise(media_estaciones = mean(daily_mean, na.rm = TRUE)) |>
  ggplot(aes(x = fecha, y = media_estaciones)) +
  geom_line(aes(color = nom_mag)) +
  labs(
    x = NULL, y = "(µg/m3)", title = "Evolución semanal de partículas contaminantes (PM10 y NOx) en Madrid",
    subtitle = "Concentración media semanal en las estaciones de medición",
    caption = "Fuente: Portal de datos abiertos del Ayuntamiento de Madrid"
  ) +
  theme_bw() +
  theme(legend.position = "none") +
  facet_wrap(~nom_mag, scales = "free_y", ncol = 1)

plot_pm10_nox
```


::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el resultado deseado.
:::


```{r pm10-nox-time-serie-hw, out.width = "100%"}
#| eval: false

plot_pm10_nox <- ____________  |>
  group_by(fecha, nom_mag) |>
  summarise(media_estaciones = mean(daily_mean, na.rm = TRUE)) |>
  ggplot(aes(x = ___________, y = ____________)) +
  geom_line(aes(color = nom_mag)) +
  labs(
    x = NULL, y = "(µg/m3)", 
    title = "Evolución semanal de PM10 y NOx en Madrid",
    subtitle = "Concentración media semanal en las estaciones de medición",
    caption = "Fuente: Portal de datos abiertos del Ayuntamiento de Madrid"
  ) +
  theme_bw() +
  theme(legend.position = "none") +
  facet_wrap(~nom_mag, scales = "free_y", ncol = 1)

plot_pm10_nox
```

::: {#exr-7}

¿Por qué no hacer el anterior gráfico interactivo?
:::

La función `ggplotly()` de la librería `plotly` permite hacer fácilmente gráficos 
interactivos. 

```{r pm10_nox_interactivo, out.width = "100%"}
plotly::ggplotly(plot_pm10_nox)
```



::: {#exr-7}
Algunas relaciones bi-variantes y n-variantes interesantes que se pueden establecer entre los contaminantes PM10 y NOx en el periodo del estado de alarma por la pandemia de COVID-19.
:::

```{r}
pm10_nox_mad_alarma <- contam_mad |>
  na.omit() |>
  filter(nom_abv %in% c("PM10", "NOx")) |>
  # período del estado de alarma
  filter(between(fecha, left = as.Date("2020-03-14"), right = as.Date("2020-06-30"))) |>
  select(estaciones, zona, tipo, nom_abv, daily_mean, fecha) |>
  pivot_wider(names_from = "nom_abv", values_from = "daily_mean", values_fn = mean)

pm10_nox_mad_alarma |>
  ggplot(
    aes(x = PM10, y = NOx, colour = tipo, size = zona)
  ) +
  geom_point()
```



```{r}
pm10_nox_mad_alarma |>
  drop_na() |>
  ggplot(aes(y = NOx, x = PM10, colour = tipo, shape = zona)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(vars(estaciones))
```



# Piensa como un diseñador


Antes de avanzar vamos a poner a prueba lo aprendido hasta aquí. Para ello nos centraremos en el NOx.

```{r nox-viloin-zonas}
nox_madrid <- contam_mad |>
  na.omit() |>
  filter(nom_abv == "NOx") |>
  filter(between(fecha, left = as.Date("2022-03-01"), right = as.Date("2022-03-31")))
```



::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el resultado deseado.
:::

```{r nox-viloin-zonas-hw}
#| eval: false

nox_madrid |>
  _____(aes(x= zona, y=daily_mean)) +
  geom_xxxxx() +
  geom_xxxxx(height = 0, width = 0.01) +
  aes(x = zona, y = daily_mean, fill = zona) +
  labs(
    title = "Distribución de NOx por zona",
    x = "Zona",
    y = "Concentración de NOx (µg/m3)"
  ) +
  theme_xxxxx()
```



```{r nox-viloin-zonas2}
#| echo: false

nox_madrid |>
  ggplot(aes(x= zona, y=daily_mean)) +
  geom_violin() +
  geom_jitter(height = 0, width = 0.01) +
  aes(x = zona, y = daily_mean, fill = zona) +
  labs(
    title = "Distribución de NOx por zona",
    x = "Zona",
    y = "Concentración de NOx (µg/m3)"
  ) +
  theme_minimal()
```

Ahora con algunas estadísticas interesantes:


::: {.callout-important title="Tu turno"}

Completa las partes del código señaladas por `______` o `xxx` para obtener el resultado deseado.
:::

```{r nox-violin-zoas-stat-hw}
#| eval: false
library(ggstatsplot)

ggbetweenstats(
  data = ______,
  x = _______,
  y = _______
)
```


```{r nox-violin-zoas-stat}
#| echo: false

library(ggstatsplot)

ggbetweenstats(
  data = nox_madrid,
  x = zona,
  y = daily_mean
)
```


Ahora, utilizando la función `geom_density_ridges()` de la librería `ggridges` vamos a hacer un gráfico de densidad (Ridgeline) de `NOx` por `zona`.
 

```{r nox-ggridges-densidad-zonas}
library(ggridges)
nox_madrid |>
  ggplot(aes(x = daily_mean, y = zona, fill = zona)) +
  geom_density_ridges() +
  theme_ridges() +
  labs(
    title = "Distribución de NOx por zona de calidad del aire",
    x = "Concentración de NOx (µg/m3)",
    y = "Zona"
  ) +
  theme_minimal()
```



::: {#exr-8}

¿Cómo es la relación bivariante de estos dos contaminantes?
:::



::: {#exer-anova .exercise name="ANOVA"}

Compruebe con un Análisis de la Varianza si los niveles de concentración de NOx
dependen de las variables tipo y zona
:::


```{r anova}
contam_mad_anova <- contam_mad |>
  filter(nom_abv == "NOx") |>
  drop_na()

anova <- aov(data = contam_mad_anova, daily_mean ~ zona + tipo)
summary(anova)

```



```{r anova-plot}
ggplot(contam_mad_anova, aes(x = zona, y = daily_mean, fill = tipo)) +
  geom_boxplot() +
  labs(title = "NOx por Zona y Tipo",
       x = "Zona",
       y = "Daily Mean",
       fill = "Tipo") +
  theme_minimal()
```



::: {#exer-anova .exercise name="ANOVA"}

¿Qué paso la semana de la calima de marzo de 2022 con el PM en la ciudad de Madrid?
:::



```{r pm-max, out.width = "100%"}
particulas <- c("Partículas < 2.5 µm", "Partículas < 10 µm")

calima <- contam_mad |>
  filter(nom_mag %in% particulas &
    fecha %in% seq.Date(as.Date("2022-03-01"), by = "day", length.out = 31)) |>
  group_by(fecha, id, id_name, nom_mag, nom_abv, ud_med) |>
  summarize(valor_promedio = mean(daily_mean, na.rm = T))


max_2.5 <- calima |>
  ungroup() |>
  filter(nom_mag == particulas[1]) |>
  slice(which.max(valor_promedio))
max_10 <- calima |>
  ungroup() |>
  filter(nom_mag == particulas[2]) |>
  slice(which.max(valor_promedio))

library(ggrepel)
calima |>
  ggplot(aes(fecha, valor_promedio, colour = nom_mag)) +
  geom_jitter() +
  geom_smooth(
    method = "loess",
    span = .5,
    se = FALSE,
    show.legend = FALSE
  ) +
  scale_x_date(
    breaks = seq.Date(as.Date("2022-03-01"), by = "week", length.out = 5),
    date_labels = "%d-%b"
  ) +
  scale_color_manual(values = c("#261606", "#DD9C4A")) +
  geom_label_repel(
    data = max_10,
    mapping = aes(fecha, valor_promedio, label = paste(id_name)),
    show.legend = FALSE
  ) +
  geom_label_repel(
    data = max_2.5,
    mapping = aes(fecha, valor_promedio, label = paste(id_name)),
    show.legend = FALSE
  ) +
  labs(
    title = "Registro de partículas durante el mes de marzo 2022",
    subtitle = "Madrid",
    x = NULL,
    y = unique(calima$ud_med),
    color = NULL,
    caption = "Fuente: Red de Vigilancia de la Calidad del Aire del Ayto. de Madrid"
  ) +
  theme_minimal()
```


# Cuenta la historia de tus datos. Predicción espacial del PM10 (calima del 13-17 marzo)

```{r spatial, out.width = "100%"}
# idw
library(mapSpain)
library(sf)

mad_sf <- esp_get_munic(munic = "^Madrid$", epsg = 4326)

marzo_pm10 <- contam_mad |>
  filter(nom_abv == "PM10" & fecha >= as.Date("2022-03-13") & fecha <= as.Date("2022-03-17")) |>
  drop_na()

madrid_estaciones_sf <- st_as_sf(marzo_pm10,
  coords = c("longitud", "latitud"),
  crs = 4326
)

library(gganimate)
ggplot(madrid_estaciones_sf) +
  geom_sf(
    data = mad_sf,
    fill = "#DD9C4A",
  ) +
  geom_sf(aes(fill = daily_mean),
    shape = 21,
    size = 5,
    alpha = .7
  ) +
  labs(fill = "PM10") +
  scale_fill_viridis_c() +
  theme_void() +
  labs(
    title = "PM10: {current_frame}"
  ) +
  transition_manual(fecha) +
  ease_aes("linear") +
  theme(
    plot.title = element_text(
      size = 12,
      face = "bold"
    ),
    plot.subtitle = element_text(
      size = 8,
      face = "italic"
    )
  )
```



