---
title: "Storytelling visual con R: primera clase"
subtitle: "Curso formativo para el PDI. Universidad de Castilla-La Mancha"
author:   
  - name: Gema Fernández-Avilés 
    email: gema.faviles@uclm.es
  - name: Isidro Hidalgo
    email: isidro.hidalgo@uclm.es 
date: "`r Sys.Date()`"
format:
  html:
    theme: cerulean
    highlight-style: ayu-mirage
    self-contained: true
    lang: es
    date-format: long
    embed-resources: true
    toc-title: Summary
    toc: true
    number-sections: true
    preview-links: auto
    code-link: true
number-sections: true
execute:
  echo: true
  eval: true
  output: true
  include: true
  freeze: auto
  fig-height: 5
  warning: false
  comment: "#>"
  code-line-numbers: true
  code-copy: true
  code-overflow: scroll
---



::: {.callout-warning}
## IMPORTANTE

**Como buen estudiante que eres, sabrás lo importante que es trabajar de forma autónoma y venir a clase con el material leído**. 
:::


# Unidad 1. 🛠 Toolkit del curso: R, RStudio y Quarto

El objetivo de esta unidad es presentar **R**, **RStudio** y **Quarto**, herramientas imprescindibles, que utilizará a lo largo del curso.


## Prerrequisitos  

Se asume que has revisado las Unidad 1 "Toolkit del curso: R, RStudio y Quarto" y que tienes instalado y funcionando todo lo propuesto en la Unidad O "Calentando motores".

## Terminología

Ya hemos utilizado algunos términos nuevos, así que vamos a definirlos antes de continuar.

- **R:** Nombre del lenguaje de programación que utilizaremos a lo largo del curso.

- **RStudio:** Entorno de desarrollo integrado para R.
    En otras palabras, una interfaz conveniente para escribir y ejecutar código R.

- **Quarto:** Sistema de publicación científica y técnica de código abierto basado en Pandoc.
Crea y publique artículos, informes, presentaciones, sitios web, blogs y libros de alta calidad en HTML, PDF, MS Word, ePub, etc., incluyendo ecuaciones, citas, referencias cruzadas, paneles de figuras, llamadas, diseño avanzado y mucho más.

- **Proyecto:** Un proyecto es un directorio de trabajo (carpeta) que contiene todo lo necesario para trabajar en un análisis de datos (proyecto) específico. Tipos de proyectos: documentos, presentaciones, paquetes, Webs.

## Empezar despacio

A medida que avanza el curso, se anima al estudiante a explorar más allá de lo que dictan las clases.
Sin embargo, antes de llegar a esa etapa, se necesita adquirir cierta fluidez básica en **R**.
En primer lugar, comprobemos que el proyecto que hemos creado funciona perfectamente. En el debemos trabajar todo el curso.

`File > New Project > New Directory > Quarto Project > Poner nombre y seleccionar directorio`

Estructura de carpetas dentro del proyecto:

* 📂 `data`

* 📂 `img`

::: {.callout-note}
## Quarto

Recuerda que en la **Unidad 1** del curso tienes todo lo necesario para realizar la Tarea 1. 

Una guía detallada sobre Quarto en RStudio está disponible en el siguiente enlace: <https://quarto.org/docs/get-started/hello/rstudio.html>

:::


# Unidad 2: 🚑 La importancia del contexto

## Manos a la obra 

::: {.callout-note}
## R: nuestro contexto

Nosotros vamos a contar historias con los datos usando el software 
estadístico **R** por lo que es necesario conocer algunos paquetes y funciones
para poder manipular y representar los datos.
:::

## Toma toda la ayuda que te presten: `dplyr :: Cheatsheet`

<https://rstudio.github.io/cheatsheets/translations/spanish/data-transformation_es.pdf>

- Datos **tidy**: ordenados
- Cada fila es una **observación**
- Cada columna es una **variable**
- **pipes**` x |> f(y)` será `f(x,y)`


## El conjunto de datos `starwars`

![**Fuente: https://datasciencebox.org**](img/starwars-dataset.png){width="50%"}




## Nuestra filosofía: *learning by doing*


1. Cargamos los datos `starwars` contenidos en el paquete `dplyr`.

```{r carga-datos-starwars}
library("dplyr")
starwars
```


2. ¿Cuántas columnas (variables) tiene?
```{r sw-ncol}
ncol(starwars)
```

3. ¿Cuántas filas (observaciones) tiene?
```{r sw-nrow}
nrow(starwars)
```

4. ¿Cuál es la dimensión del dataset?
```{r sw-dim}
dim(starwars)
```


5. ¿Cómo extraer una **variable** del `data.frame`? 

Opción 1: formato tidy
```{r}
#| eval: false
nombre_dataframe |> select(nombre_variable)
```

Opción 2: Con el operador `$`

```{r}
#| eval: false
nombre_dataframe$nombre_variable
```

::: {.callout-important title="Tu turno"}
Selecciona la variable `name` del conjunto de datos `starwars`.
:::

```{r}
# Tu código R aquí
```

6. Para asignar "algo" (la variable `name`) a "algo" (el objeto `sw_name`) se utiliza el operador `<-`.

```{r sw-variable-name}
sw_name <- starwars$name
```


::: {.callout-note}
El operador `<-` asigna al "símbolo" que hay a su izquierda el resultado
de la expresión que hay a su derecha. El operador `=` funciona "igual" que `<-`. 
:::

Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto. ¿Te acuerdas de las funciones para explorar todas las variables a la vez?


7. ¿Como extraer una observación del conjunto de datos?

```{r sw-obsev}
#| eval: false
nombre_dataframe|>
  filter(nombre_variable == "nombre_observacion")
```

::: {.callout-important title="Tu turno"}
Selecciona una observación (el bueno), `Luke Skywalker`, filtrando por el nombre en la variable `name` del conjunto `starwars`
:::


```{r sw-obsev-luke-skywalker}
# Tu código R aquí
```


8. Exploración del dataset `starwars` de un **vistazo** (con la función `skim()` de la librería `skimr`):

```{r sw-explora}
skimr::skim(starwars)
```






# Unidad 3. 📊 La elección de un gráfico efectivo: From data to viz


## ¿Cómo visualizar con la función `ggplot()` del paquete `ggplot`?

1. Cargamos el paquete `ggplot`
```{r ggplot-library, eval=FALSE}
library(ggplot2)
```


2. Trabajamos con la función `ggplot()`

```{r ggplot-teoria, eval=FALSE}
ggplot(data = nuestro_dataset, 
       mapping = aes(x = x-variable, y = y-variable)) +
   geom_xxx() +
   otras opciones
```


## ¿Cómo describirías la relación entre la masa (`mass`) y la altura (`height`) de los personajes de Starwars (`starwars`)? 



## Paso a paso  🐾

**Paso 🐾1.** El primer argumento de `ggplot()` es el conjunto de datos que se utilizará en el gráfico 

```{r}
library(ggplot2)
ggplot(data = starwars) 
```


**Paso 🐾2.** Indicamos a `ggplot()` cómo se representará visualmente la información de nuestros datos. El argumento `mapping` de la función ggplot() define cómo se asignan las variables del conjunto de datos a las propiedades visuales (estéticas) del gráfico. 

La función `aes()`, y los argumentos `x` e `y` de aes() especifican qué variables mapear a los ejes x e y. Asignaremos `height` a la estética `x` y `mass` a la estética `y`.

```{r starwars2-2}
ggplot(data = starwars,
       mapping = aes(x = height, y = mass)) 
```


**Paso 🐾3.** Necesitamos definir un **geom**: el objeto geométrico que un gráfico utiliza para representar los datos. Estos objetos geométricos están disponibles en `ggplot2` con funciones que empiezan por **geom_**.

Los gráficos de barras utilizan `geom_bar()`, los gráficos de líneas utilizan `geom_line()`, los boxplots utilizan `geom_boxplot()`, los scatterplots utilizan `geom_point()`, etc.

```{r starwars2-3}
ggplot(data = starwars,
       mapping = aes(x = height, y = mass)) + 
  geom_point() 
```


**Paso 🐾4.** Añade la variable `gender` en `aes()` para visualizar el género de cada observación

```{r starwars2-4 }
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) + 
  geom_point()
```



**Paso 🐾5.** Añadimos título al gráfico: "Mass vs. height of Starwars characters" 

```{r starwars2-5}
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour =gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters")
```


**Paso 🐾6.** Añadimos el subtítulo "by gender"

```{r starwars2-6}
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters",
       subtitle = "by gender")
```




**Paso 🐾7.** Etiquetamos los ejes x e y como con las siguiente expresiones: x = "Height (cm)", y = "Weight (kg)", respectivamente.

```{r starwars2-7}
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters",
       subtitle = "by gender",
       x = "Height (cm)", y = "Weight (kg)")
```




**Paso 🐾8.** Ahora, etiquetamos la leyenda con la expresión: "Species".

```{r starwars2-8 }
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters",
       subtitle = "by gender",
       x = "Height (cm)", y = "Weight (kg)",
       colour = "Gender")
```


**Paso 🐾9.** Añadimos la fuente de los datos, el paquete `dplyr`.

```{r starwars2-9}
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters",
       subtitle = "by gender",
       x = "Height (cm)", y = "Weight (kg)",
       colour = "Gender",
       caption = "Source: dplyr package")
```


**Paso 🐾10.** Finalmente, usamos paleta con una escala de colores discreta que está diseñada para ser percibida por espectadores con formas comunes de daltonismo, `scale_colour_viridis_d()`.

```{r starwars2-10}
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = gender)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters",
       subtitle = "by gender",
       x = "Height (cm)", y = "Weight (kg)",
       colour = "Gender",
       caption = "Source: dplyr package")  +
  scale_colour_viridis_d()
```



## Aesthetics (estética) `r emo::ji("hit")`  {background-color="#017eae"}

```{r aes-col, eval= FALSE }
ggplot(data = starwars,
       mapping = aes(x = height,
                     y = mass,
                     colour = xxxxx,
                     shape = xxxxx,
                     size = xxxxx,
                     alpha = xxxxx)
       ) +
  geom_point()
```




