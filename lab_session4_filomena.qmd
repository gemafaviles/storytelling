---
title: "Storytelling visual con R: primera clase"
subtitle: "Curso formativo para el PDI. Universidad de Castilla-La Mancha"
author:   
  - name: Gema Fernández-Avilés 
    email: gema.faviles@uclm.es
  - name: Isidro Hidalgo
    email: isidro.hidalgo@uclm.es 
date: "`r Sys.Date()`"
format:
  html:
    theme: cerulean
    highlight-style: ayu-mirage
    self-contained: true
    lang: es
    date-format: long
    embed-resources: true
    toc-title: Summary
    toc: true
    number-sections: true
    preview-links: auto
    code-link: true
number-sections: true
execute:
  echo: true
  eval: true
  output: true
  include: true
  freeze: auto
  fig-height: 5
  warning: false
  comment: "#>"
  code-line-numbers: true
  code-copy: true
  code-overflow: scroll
---



::: {.callout-warning}
## IMPORTANTE

**Como buen estudiante que eres, sabrás lo importante que es trabajar de forma autónoma y venir a clase con el material leído**. 
:::



::: {.callout-note}
Los datos que se utilizan en esta historia están disponibles en el paquete `CDR` que puede instalarse con el siguiente comando (se comprueba si no lo está):

``` {r}
#| code-summary: Instalación y/o carga del paquete `CDR`

if (!require(CDR)){
  if (!require(remotes)) {install.packages("remotes")}
  remotes::install_github("cdr-book/CDR")
  }
```

Los datos referentes a la temperatura en España han sido recopilados por la Agencia Estatal de Meteorología (AEMET) y descargados en **R** con el paquete climatológico `climaemet`. Los mapas de España han sido procesados con el paquete `mapSpain`.
:::

# ¿Dónde se 'ha sufrido' más la borrasca Filomena?

El director de informativos de RTVE nos ha pedido al equipo de visualización que le preparemos un mapa rebonico para Informe Semanal. Como siempre, de un día para otro... ¡Que estamos a viernes por la tarde y ya me iba a ir a casica, con mi batica de Albacete! Que ya se sabe: "¡Pijama y bata... calefacción barata!".

# Entender el contexto

::: {.callout-tip}
## Cómo definir el propósito y la audiencia de tu análisis

En este caso, está muy claro lo que nos piden: un mapa de España donde se pueda valorar fácilmente dónde ha sido más intensa la borrasca, por lo que directamente vamos a ir a visualizaciones basadas en el paquete `sf`, que nos permite usar geoestadística al más alto nivel y representar cualquier fenómeno espacialmente.

Como siempre, vamos a empezar por explorar un poco los datos y después finalizaremos con la visualización espacial.
:::


```{r}
#| code-summary: Carga de libreías necesarías

library(CDR)
library(tidyverse)
library(mapSpain)
library(sf)
library(GGally)
library(corrplot)
library(explore)
```


::: {.callout-warning}
## CUIDADO: estamos trabajando con datos espaciales
:::

Visualizamos las primeras filas del dataset que vamos a utilizar `tempmin_data` ya creado y disponible en el paquete `CDR`.

```{r}
#| code-summary: Mostramos las primeras filas del conjunto datos.

# CDR::tempmin_data

head(tempmin_data, 6)
```

# Elegir una visualización adecuada

::: {.callout-tip}
## Selección de gráficos y visualizaciones que mejor representen tus datos.
:::

## ¿Gráfico de cajas o de violines?

Ambas soluciones son ideales para ver la distribución de las temperaturas mínimas. Recomendamos los violines porque son más informativos, ya que se ve mejor la distribución de las variables cuantitativas. Empecemos por el gráfico de cajas...

```{r}
#| code-summary: Boxplot

ggplot(tempmin_data, aes(x = fecha, y = tmin)) +
  geom_boxplot(fill = "orange")
```

## Mejora tu visualización con las herramientas disponibles

¿Cómo podemos mejorar esta visualización? Ya hemos visto algunas:

-   gráfico de violines

-   título y subtítulo declarativos

-   estética: color, anotaciones

Y por encima de todo: ¡simplicidad!

```{r }
#| code-summary: Violin y boxplot
boxplot_inicial <- ggplot(tempmin_data,
                          aes(x = fecha, y = tmin)) +
  geom_violin(color = "orange") +
  geom_boxplot(alpha = 0.6, 
               fill = "orange") +
  labs(title = "La borrasca Filomena fue más intensa el 6 de enero",
       x = "Fecha", 
       y = "Temperatura mínima (°C)") +
  theme_minimal()

boxplot_inicial
```

## Simplificación

Basta una primera mirada al gráfico para darnos cuenta de que las dos visualizaciones (caja y violín) aportan conjuntamente demasiada información. Por tanto, eliminamos elementos innecesarios del gráfico para enfocar la atención en lo que queremos destacar.

Por eso, calculamos la mediana de las temperaturas y las conectamos temporalmente mediante un gráfico de línea, de forma que podamos indicar, no solo la distribución de la variable, sino también su evolución:

```{r}
#| code-summary: Preparación de los datos
medianas <- tempmin_data |>
  select(fecha, tmin) |>
  group_by(fecha) |>
  mutate(mediana = median(tmin)) |>
  select(fecha, mediana) |>
  unique()

medianas$pos <- 1:5
```

Aquí podríamos añadir los valores sobre el violín. En algunos casos, como cuando hay colas muy largas (aquí la inferior del día 7) es interesante ver si se debe a pocos valores o, por el contrario, hay que tenerlos en cuenta. Vamos a verlo:


::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto. ¿Te acuerdas de las funciones para explorar todas las variables a la vez?
:::

```{r}
#| eval: false
boxplot_inicial <- ggplot(tempmin_data,
                          aes(x = fecha, y = tmin)) +
  geom_violin(color = "orange",              #  añade un violín
              fill = "orange", 
              alpha = .7) +  
  geom_point(data = medianas,                #  añade las medianas
             aes(x = fecha, y = _______),      
             color = "darkblue") +
  geom_XXXX(data = medianas, 
            aes(x = pos, y = mediana),       #  añade una linea de conexión
            color = "darkblue") +
  geom_jitter(size = .2, 
              width = .2) +                   #  añade los puntos dispersos para evitar superposición
  labs(title = "Temperaturas mínimas durante la borrasca Filomena",
       ________ = "6 de enero: día más frío (mediana en color azul)",
       x = "Fecha", 
       y = "Temperatura mínima (°C)") +
  theme_minimal() 

boxplot_inicial
```


```{r}
#| echo: false
boxplot_inicial <- ggplot(tempmin_data,
                          aes(x = fecha, y = tmin)) +
  geom_violin(color = "orange", fill = "orange", alpha = .7) +
  geom_point(data = medianas, aes(x = fecha, y = mediana),
             color = "darkblue") +
  geom_line(data = medianas, aes(x = pos, y = mediana),
            color = "darkblue") +
  geom_jitter(size = .2, width = .2) +
  labs(title = "Temperaturas mínimas durante la borrasca Filomena",
       subtitle = "6 de enero: día más frío (mediana en color azul)",
       x = "Fecha", y = "Temperatura mínima (°C)") +
  theme_minimal() 

boxplot_inicial
```

Se ve claramente que las colas de los días 7 y 8 se deben casi exclusivamente a una estación, por lo que nuestra conclusión (y la que refleja la mediana) de etiquetar el día 6 como el peor, es acertada.

::: {.callout-tip}
## CUIDADO: es importante usar el argumento `size` en la función `geom_jitter` para hacer lo suficientemente pequeños los puntos y que no "molesten". Si se deja el valor por defecto (`size = 1`) aumentamos mucho el desorden. Para ver el efecto de los 2 parámetros, se pueden probar distintos valores y determinar los más estéticos.
:::


## Visualizaciones espaciales

En visualización, usando técnicas espaciales tenemos claramente las de ganar, porque tienen una estética muy atractiva *per se*.

### Paso 1: Define y prepara los datos con un formato espacial

```{r}
#| code-summary: Ponemos el objeto tempmin_data en formato espacial
tmin_sf <- st_as_sf(tempmin_data, 
                    coords = c("longitud", "latitud"), 
                    crs = 4326)
```


### Paso 2: Utiliza las librerías para la representación espacial `sf` y `geof_sf`
```{r}
#| code-summary: Primera representación tmin_sf
ggplot() +
  geom_sf(data = tmin_sf, 
          aes(color = tmin)) +
  labs(title = "Temperaturas mínimas (6-10 enero 2021)",
       x = "Longitud", y = "Latitud") 
```



### Paso 3: Añadimos un mapa de España con el paquete `mapSpain`

Ahora necesitamos un mapa de España y hacer unas comprobaciones

```{r}
#| code-summary: Con la librería mapSpain cargamos el mapa de España sin las Islas Canarias  (por simplicidad)
esp <- esp_get_ccaa() |>
  filter(ine.ccaa.name != "Canarias") # Filtramos las Islas Canarias
```

::: {.callout-warning}
## ¿Están los datos de temperatura mínima en el mismo sistema de coordenadas que el mapa?
:::

::: {.callout-tip}
## CRS: Un Sistema de Referencia de Coordenadas, o CRS, es un método para asociar coordenadas numéricas con una posición en la superficie de la Tierra.
:::

Verificamos que los sistemas de coordenadas de la capa de mapas de España (paquete `mapspain`) y de la capa de temperaturas mínimas (paquete `CDR`) sean los mismos; si no lo son, transformamos uno para igualarlos.
```{r}
#| code-summary: Comprobación de los CRS de los datos y el mapa
if (st_crs(tmin_sf) != st_crs(esp)) {
  esp <- st_transform(esp, st_crs(tmin_sf))
}
```


### Paso 4: Seleccionamos el día más frío (6-enero)

Puesto que el día de mayor intensidad general fue el 6 de enero, vamos a trabajar con esas temperaturas mínimas, representándolas en un mapa para ver las zonas más afectadas.

```{r}
tmin_6enero <- tmin_sf |> 
  filter(fecha == "2021-01-06")

mapa_inicial <- ggplot() +
  geom_sf(data = esp, fill = "grey95") +
  geom_sf(data = tmin_6enero, aes(color = tmin)) +
  theme_dark()

mapa_inicial 
```

::: {#exr-1}
¿Qué podríamos hacer para mejorar esta visualización?
:::

Algunas cosas que se pueden hacer:

-   añadir un título (y subtítulo) declarativo interesante

-   eliminar distracciones (por ejemplo el fondo)

-   aumentar el tamaño de los puntos para que se aprecie mejor la gama de colores de la escala

-   mejorar directamente los colores de la escala, para que se aprecien bien las diferencias

::: {.callout-important title="Tu turno"}
Completa las partes del código señaladas por `_____` o `xxxxx` para obtener el resultado propuesto.
:::

```{r }
#| eval: false

mapa_final <- ggplot() +
  geom_xx(data = esp, fill = "grey95") +
  geom_xx(data = ____________, aes(color = tmin), size = 3, alpha = 0.7) +
  labs(title = "Temperaturas mínimas durante la borrasca Filomena (6 de enero de 2021)",
       subtitle = "Las temperaturas mínimas fueron más bajas en la España interior y zonas de montaña",
       color = "Temperatura mínima (°C)") +
  scale_color_XXXXXXX_c() +
  theme_minimal()

mapa_final
```

```{r }
#| echo: false 

mapa_final <- ggplot() +
  geom_sf(data = esp, fill = "grey95") +
  geom_sf(data = tmin_6enero, aes(color = tmin), size = 3, alpha = 0.7) +
  labs(title = "Temperaturas mínimas durante la borrasca Filomena (6 de enero de 2021)",
       subtitle = "Las temperaturas mínimas fueron más bajas en la España interior y zonas de montaña",
       color = "Temperatura mínima (°C)") +
  scale_color_viridis_c() +
  theme_minimal()

mapa_final
```

### ¿Añadimos la dimensión temporal?

Podemos usar facetas según el día en los que transcurrió la borrasca. Vamos a verlo.

```{r }
#| echo: false

ggplot() +                                # Inicia un gráfico vacío con ggplot
  geom_sf(data = esp, fill = "grey95") +  # Añade un objeto sf (esp) con relleno gris claro
  geom_sf(data = tmin_sf,                 # Añade otro objeto sf (tmin_sf)
          aes(color = tmin),              # Colorea los puntos según la temperatura mínima (tmin)
          size = 3,                       # Tamaño de los puntos
          alpha = 0.7) +                  # Transparencia de los puntos
  facet_wrap(vars(fecha),                 # Crea facetas por la variable fecha
             ncol = 3) +                  # Número de columnas en las facetas
  scale_color_viridis_c() +               # Aplica una escala de color viridis continua
  theme_light() +                         # Aplica un tema claro al gráfico
  labs(title = "Temperaturas mínimas en España durante Filomena",          
       subtitle = "Del 6 al 10 de enero de 2021",                        
       color = "Temp. mínima (°C)") +  
  theme(legend.position = "bottom")   
```

::: {.callout-tip}
¿Qué os parece?¿Añade información interesante la dimensión temporal? ¿Y usando otra escala más acorde con nuestra idea de frío y calor?
:::

Fijémonos lo que se puede hacer con una buena elección de escala. ¿Mejora la claridad y el impacto visual? ¿Se aprecian las diferencias temporales?

```{r }
#| code-summary: Gráfico con la escala adecuada

cortes <- c(-Inf, seq(-20, 20, 2.5), Inf)       # Define los cortes para la escala de colores, desde -Inf a Inf con intervalos de 2.5
colores <- hcl.colors(15, "PuOr", rev = TRUE)  # Genera una paleta de colores con 15 colores usando la paleta "PuOr" y los revierte

ggplot() +                                    
  geom_sf(data = esp, fill = "grey95") +      
  geom_sf(data = tmin_sf, 
          aes(color = tmin), 
          size = 3, 
          alpha = 0.7) +  
  facet_wrap(vars(fecha), 
             ncol = 3) +  
  scale_color_gradientn(colours = colores,   # Aplica una escala de color con los colores 
                        breaks = cortes,     # Aplica una escala de cortes con los cortes definidos
                        labels = ~ stringr::str_c(. , "º"),  # Añade etiquetas a los cortes, añadiendo el símbolo de grados
                        guide = "legend") +  # Usa una leyenda para la guía de colores
  theme_light() +  
  labs(title = "Temperaturas mínimas en España durante Filomena",    
       subtitle = "Del 6 al 10 de enero de 2021",   
       color = "Temp. mínima (°C)")  
```

# Contar una historia

::: {.callout-tip}
## Cómo narrar una historia convincente con tus datos.

Hemos visto el **planteamiento**, en el que proporcionamos el contexto: trabajamos para el director de informativos de RTVE, que nos ha pedido un mapa para presentarlo en las noticias.

El análisis exploratorio nos da una idea: el día más frío durante la borrasca Filomena fue el 6 de enero, por lo que ya tenemos qué información interesante debemos destacar.

Pero como remarcamos siempre, lo más importante es el **desenlace**, donde le estamos dando a nuestro director lo que nos pide:

-   Un mapa donde se aprecia el **diferente impacto de la borrasca según la zona de España**...

-   ...introduciendo la **dimensión temporal** con facetas.

:::

# Para pensar:

::: {.callout}
En esta historia hemos visto lo importante que puede ser la **elección de una buena escala de colores**. 

Merece mucho la pena dedicar tiempo a la escala (intervalos y gama de colores), ya que, especialmente cuando hay gradientes continuos convertibles en categorías discretas, puede suponer acertar con la visualización o perder una buena oportunidad.
:::


